# TO UPDATE
on:
  workflow_run:
    workflows: [ "CI" ]
    branches: [ "main", "develop" ]
    types:
      - completed
  workflow_dispatch:


jobs:

  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    env:
      TOKEN: ${{ github.event.pull_request.base.ref == 'main' && secrets.PROD_REGISTRY_TOKEN || secrets.PREPROD_REGISTRY_TOKEN }}
      REGISTRY_URL: ${{ github.event.pull_request.base.ref == 'main' && secrets.PROD_REGISTRY_URL || secrets.PREPROD_REGISTRY_URL }}
      REGISTRY_USER: ${{ github.event.pull_request.base.ref == 'main' && secrets.PROD_REGISTRY_USER || secrets.PREPROD_REGISTRY_USER }}
      USERNAME: ${{ github.event.pull_request.base.ref == 'main' && secrets.PROD_CD_USERNAME || secrets.PREPROD_CD_USERNAME }}
      HOST: ${{ github.event.pull_request.base.ref == 'main' && secrets.PROD_CD_HOST || secrets.PREPROD_CD_HOST }}


    steps:

      - name: SSH init
        run: |
          mkdir -p ~/.ssh
          cd ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > id_rsa
          chmod 600 id_rsa
          
      
      - name: Login to Registery
        run: ssh  -oStrictHostKeyChecking=no -i ~/.ssh/id_rsa "${{ env.USERNAME }}"@"${{ env.HOST }}" 'echo "${{ env.TOKEN }}" | docker login "${{ env.REGISTRY_URL }}" -u "${{ env.REGISTRY_USER }}" --password-stdin'


      - name: Deploy
        run: ssh -oStrictHostKeyChecking=no -i ~/.ssh/id_rsa "${{ env.USERNAME }}"@"${{ env.HOST }}"  \ 
          'docker compose pull && docker compose up -d'
