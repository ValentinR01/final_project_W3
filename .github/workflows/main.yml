name: Pipeline
# TO UPDATE
on:
  pull_request:
    branches: [ "main", "develop" ]
  workflow_dispatch:
  
env:
  TOKEN: ${{ github.event.pull_request.base.ref == 'main' && secrets.PROD_REGISTRY_TOKEN || secrets.PREPROD_REGISTRY_TOKEN }}
  REGISTRY_URL: ${{ github.event.pull_request.base.ref  == 'main' && secrets.PROD_REGISTRY_URL || secrets.PREPROD_REGISTRY_URL }}
  REGISTRY_USER: ${{ github.event.pull_request.base.ref  == 'main' && secrets.PROD_REGISTRY_USER || secrets.PREPROD_REGISTRY_USER }}
  USERNAME: ${{ github.event.pull_request.base.ref == 'main' && secrets.PROD_CD_USERNAME || secrets.PREPROD_CD_USERNAME }}
  HOST: ${{ github.event.pull_request.base.ref == 'main' && secrets.PROD_CD_HOST || secrets.PREPROD_CD_HOST }}

jobs:

  python-api-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.9
        uses: actions/setup-python@v3
        with:
          python-version: 3.9
      - name: Install linter
        run: |
          python -m pip install --upgrade pip
          pip install flake8-flask
      - name: Lint with flake8
        run: cd flask_app/src
          && flake8 --config=flake8/.flake8 .


  build-test-push-front:
    name: build-test-push-front
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Build Docker Image
        run: docker buildx build . --file ./dockerfile/Dockerfile-front --tag "${{ env.REGISTRY_URL }}"/dam-front:latest --target PROD

      - name: Login to Registry
        run: echo "${{ env.TOKEN }}" | docker login "${{ env.REGISTRY_URL }}" -u "${{ env.REGISTRY_USER }}" --password-stdin

      - name: Push to Registry
        run: docker push "${{ env.REGISTRY_URL }}"/dam-front:latest


  build-test-push-api:
    name: build-test-push-api
    runs-on: ubuntu-latest
    needs: [python-api-lint]

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Build Docker Image
        run: docker buildx build . --file ./dockerfile/Dockerfile-api --tag "${{ env.REGISTRY_URL }}"/dam-api:latest
       
      - name: Run Unit Tests
        run: docker run -d -e ENV=TEST --name=dam-api "${{ env.REGISTRY_URL }}"/dam-api:latest
              && docker exec dam-api bash -c 'python -m pytest'

      - name: Login to Registry
        run: echo "${{ env.TOKEN }}" | docker login "${{ env.REGISTRY_URL }}" -u "${{ env.REGISTRY_USER }}" --password-stdin

      - name: Push to Registry
        run: docker push "${{ env.REGISTRY_URL }}"/dam-api:latest
          

  deploy:
    name: deploy
    runs-on: ubuntu-latest
    needs: [build-test-push-front, build-test-push-api]
    
    steps:
      - name: SSH init
        run: |
          mkdir -p ~/.ssh
          cd ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > id_rsa
          chmod 600 id_rsa

      - name: Login to Registry
        run: ssh -oStrictHostKeyChecking=no -i ~/.ssh/id_rsa "${{ env.USERNAME }}"@"${{ env.HOST }}" 'echo "${{ env.TOKEN }}" | docker login "${{ env.REGISTRY_URL }}" -u "${{ env.REGISTRY_USER }}" --password-stdin'

      - name: Deploy
        run: ssh -oStrictHostKeyChecking=no -i ~/.ssh/id_rsa "${{ env.USERNAME }}"@"${{ env.HOST }}" \
            'docker compose pull front && docker compose pull dam-backoffice-api && docker compose up -d'